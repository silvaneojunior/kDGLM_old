% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{eval_past}
\alias{eval_past}
\title{eval_past}
\usage{
eval_past(
  model,
  smooth = FALSE,
  T = 1:t_last,
  h = 1 - smooth,
  pred_cred = 0.95
)
}
\arguments{
\item{model}{<undefined class> or list: The fitted model to be use for evaluation.}

\item{smooth}{bool: The flag indicating if smoothed values should be used. If TRUE, h will not be used.}

\item{T}{vector: An vector of positive integers indicating the time index from which to extract predictions.}

\item{h}{positive integer: The relative offset for forecast. Values for time t will be calculated based on the filtered values of time t-h Will be ignored if smooth is TRUE.}

\item{pred_cred}{Numeric: The credibility level for the I.C. intervals.}
}
\value{
A list containing:
\itemize{
   \item data data.frame: A table with the model evaluated at each observed time.
   \item mt Matrix: The mean of the latent variables at each time. Dimensions are n x T.
   \item Ct Array: A 3D-array containing the covariance matrix of the latent variable at each time. Dimensions are n x n x T.
   \item ft Matrix: The mean of the linear predictor at each time. Dimensions are k x T.
   \item Qt Array: A 3D-array containing the covariance matrix for the linear predictor at each time. Dimensions are k x k x T.
}
}
\description{
Evaluates the predictive values for the observed values used to fit the model and it's latent variables.
Predictions can be made with smoothed values or with filtered values with a time offset.
}
\examples{
T <- 200
w <- ((T + 20) / 40) * 2 * pi
y1 <- matrix(rpois((T + 20), 20 * (sin(w * 1:(T + 20) / (T + 20)) + 2)), (T + 20), 1)
y2 <- matrix(rpois((T + 20), 1:(T + 20) / (T + 20) + 1), (T + 20), 1)
y3 <- matrix(rpois((T + 20), 6), (T + 20), 1)
y <- cbind(y1, y2, y3)
y_pred <- y[T:(T + 20), ]

y <- y[1:T, ]

level <- polynomial_block(p1 = 1) + polynomial_block(p2 = 1)
season_2 <- harmonic_block(p2 = 1, period = 20)

outcome <- Multinom(p = c("p1", "p2"), outcome = y)

fitted_data <- fit_model(level, season_2, outcomes = outcome)

past <- eval_past(fitted_data, smooth = TRUE)

}
\seealso{
Other {auxiliary functions for fitted_dlm objects}: 
\code{\link{dlm_sampling}()},
\code{\link{fit_model}()},
\code{\link{forecast}()}
}
\concept{{auxiliary functions for fitted_dlm objects}}
