% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/normal_gamma_kernel.R
\name{normal_gamma_fit}
\alias{normal_gamma_fit}
\title{normal_gamma_fit}
\usage{
normal_gamma_fit(
  outcome,
  m0 = 0,
  C0 = 1,
  FF,
  G,
  D,
  W,
  offset,
  pred_cred = 0.95,
  parms = list(),
  kernel_filter = normal_gamma_filter
)
}
\arguments{
\item{outcome}{Matrix: The observed data. It's dimension shoulb be T x m, where T is the length of the time series and m is the number of outcomes at each time.}

\item{m0}{Vector: The prior mean for the latent vector.}

\item{C0}{Matrix: The prior covariance matrix for the latent vector.}

\item{FF}{Array: A 3D-array containing the regression matrix for each time. It's dimension should be n x m x T, where n is the number of latent variables, m is the number of outcomes in the model and T is the time series length.}

\item{G}{Matrix: The state evolution matrix.}

\item{D}{Array: A 3D-array containing the discount factor matrix for each time. It's dimension should be n x n x T, where n is the number of latent variables and T is the time series length.}

\item{W}{Array: A 3D-array containing the covariance matrix of the noise for each time. It's dimension should be the same as D.}

\item{offset}{Matrix: The offset of the model. It's dimension should be the same as outcome.}

\item{pred_cred}{Numeric: the desired credibility for the credibility interval.}

\item{parms}{list: a list contaning extra arguments. In this model, extra parameters are not used.}

\item{kernel_filter}{function: the method for filtering.}
}
\value{
A list containing the following values:
\itemize{
   \item mt Matrix: The filtered mean of the latent variables for each time. Dimensions are n x T.
   \item Ct Array: A 3D-array containing the filtered covariance matrix of the latent variable for each time. Dimensions are n x n x T.
   \item ft Matrix: The one-step-ahead linear predictor for each time. Dimensions are m x T.
   \item qt Array: A 3D-array containing the one-step-ahead covariance matrix for the linear predictor for each time. Dimensions are m x T.
   \item a Matrix: The alpha parameter for the gamma prior for each time. Dimensions are m x T.
   \item b Matrix: The beta parameter for the gamma prior for each time. Dimensions are m x T.
   \item a.post Matrix: The alpha parameter for the gamma posteior for each time. Dimensions are m x T.
   \item b.post Matrix: The beta parameter for the gamma posteior for each time. Dimensions are m x T.
   \item FF Array: The same as the argument (same values).
   \item G Matrix: The same as the argument (same values).
   \item D Array: The same as the argument (same values).
   \item W Array: The same as the argument (same values).
   \item pred Matrix: The one-step-ahead predictions for each time. Dimensions are m x T.
   \item var.pred Matrix: The variance for the one-step-ahead predictions for each time. Dimensions are m x T. Note that, in the multivariate Poisson case, the series are supossed independent, so, in particular, they are uncorrelated.
   \item icl.pred Matrix: The lower credibility interval for the prediction at each time. Dimensions are m x T.
   \item icu.pred Matrix: The upper credibility interval for the prediction at each time. Dimensions are m x T.
   \item pred_cred Numeric: Deprecated
   \item offset Vector: The same as the argument (same values).
   \item log.like Matrix: log likelyhood for the filtered parameters based on the one-step ahead prediction.
   \item outcome Matrix: The same as the argument outcome (same values).
   \item parms: The same as the argument.
}
}
\description{
Fit the  normal model given the observed value and the model parameters.
}
\examples{
# Not ideal way: should use fit_model function.
T <- 200
mean <- 2 * 1:T / 200
var <- 3 * 1:T / 200
outcome <- matrix(rt(T, 10) * 2 * sqrt(var) + mean)
m0 <- c(0, 0, 0, 0)
C0 <- diag(c(1, 1, 1, 1))
G <- as.matrix(Matrix::bdiag(
  matrix(c(1, 0, 1, 1), 2, 2),
  matrix(c(1, 0, 1, 1), 2, 2)
))
FF <- array(matrix(c(1, 0, 0, 0, 0, 0, 1, 0), 4, 2), c(4, 2, T))
D <- array(diag(c(0.1, 0, 0.1, 0)), c(4, 4, T)) + 1
W <- array(diag(c(0, 0, 0)), c(4, 4, T))
offset <- matrix(1, T, 1)

fitted_data <- GDLM::normal_gamma_fit(outcome = outcome, m0 = m0, C0 = C0, FF = FF, G = G, D = D, W = W, offset = offset, pred_cred = 0.95)

plot(outcome)
lines(fitted_data$pred[1, ])
}
